<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>heapSort</title>
    <link href="/2023/08/29/heapSort/"/>
    <url>/2023/08/29/heapSort/</url>
    
    <content type="html"><![CDATA[<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tmp = arr[i];<br>    arr[i] = arr[j];<br>    arr[j] = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 停止条件：当前来到头结点或者当前节点不在比它的父节点大</span><br>    <span class="hljs-keyword">while</span> (arr[index] &gt; arr[(index - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr, index, (index - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>);<br>        index = (index - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> heapSize)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> left = index * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; heapSize)<br>    &#123;<br>        <span class="hljs-comment">// two children choose bigger one</span><br>        <span class="hljs-type">int</span> largest = left + <span class="hljs-number">1</span> &lt; heapSize &amp;&amp; arr[left + <span class="hljs-number">1</span>] &gt; arr[left] ? left + <span class="hljs-number">1</span> : left;<br>        <span class="hljs-comment">// 父和较大孩子之间，谁的值大，把下标给largest</span><br>        largest = arr[largest] &gt; arr[index] ? largest : index;<br>        <span class="hljs-keyword">if</span> (index == largest)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(arr, largest, index);<br>        index = largest;<br>        left = index * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (arr.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// O(N)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-comment">// O(logN)</span><br>        <span class="hljs-built_in">heapInsert</span>(arr, i);<br>    &#125;<br>    <span class="hljs-type">int</span> heapSize = arr.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-built_in">swap</span>(arr, <span class="hljs-number">0</span>, --heapSize);<br>    <span class="hljs-comment">// O(N)</span><br>    <span class="hljs-keyword">while</span> (heapSize &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// O(logN)</span><br>        <span class="hljs-built_in">heapify</span>(arr, <span class="hljs-number">0</span>, heapSize);<br>        <span class="hljs-comment">// O(1)</span><br>        <span class="hljs-built_in">swap</span>(arr, <span class="hljs-number">0</span>, --heapSize);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; arr;<br>    <span class="hljs-built_in">srand</span>((<span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">3</span>, right = <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++)<br>    &#123;<br>        arr.<span class="hljs-built_in">push_back</span>((<span class="hljs-type">int</span>)((<span class="hljs-type">float</span>)<span class="hljs-built_in">rand</span>() / RAND_MAX * (right - left + <span class="hljs-number">1</span>) + left));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : arr)<br>    &#123;<br>        cout &lt;&lt; it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-built_in">heapSort</span>(arr);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : arr)<br>    &#123;<br>        cout &lt;&lt; it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="堆结构"><a href="#堆结构" class="headerlink" title="堆结构"></a>堆结构</h1>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP</title>
    <link href="/2023/08/29/KMP/"/>
    <url>/2023/08/29/KMP/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串类算法"><a href="#字符串类算法" class="headerlink" title="字符串类算法"></a>字符串类算法</h1><p>寻找子串、寻找回文字符串（逆序之后寻找子串）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getNextArray</span><span class="hljs-params">(string &amp;str, vector&lt;<span class="hljs-type">int</span>&gt; &amp;next)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (str.<span class="hljs-built_in">length</span>() == <span class="hljs-number">1</span>)<br>    &#123;<br>        next.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    next.<span class="hljs-built_in">resize</span>(str.<span class="hljs-built_in">length</span>());<br>    next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; <span class="hljs-comment">// next数组的位置</span><br>    <span class="hljs-type">int</span> cn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; next.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str[i - <span class="hljs-number">1</span>] == str[cn])<br>        &#123;<br>            next[i++] = ++cn;<br>        &#125;<br>        <span class="hljs-comment">// 当前跳到cn位置的字符，和i-1位置字符配不上</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cn &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            cn = next[cn];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            next[i++] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">KMP</span><span class="hljs-params">(string &amp;s, string &amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m.<span class="hljs-built_in">length</span>() &lt; <span class="hljs-number">1</span> || s.<span class="hljs-built_in">length</span>() &lt; m.<span class="hljs-built_in">length</span>())<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> i1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i2 = <span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; next;<br>    <span class="hljs-comment">// O(M)</span><br>    <span class="hljs-built_in">getNextArray</span>(m, next);<br>    <span class="hljs-comment">// O(N)</span><br>    <span class="hljs-keyword">while</span> (i1 &lt; s.<span class="hljs-built_in">length</span>() &amp;&amp; i2 &lt; m.<span class="hljs-built_in">length</span>())<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i1] == m[i2])<br>        &#123;<br>            i1++;<br>            i2++;<br>        &#125;<br>        <span class="hljs-comment">// i2 == 0</span><br>        <span class="hljs-comment">// i2来到0位置，只有0位置为-1</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (next[i2] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            i1++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            i2 = next[i2];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// i1越界或者i2越界了</span><br>    <span class="hljs-keyword">return</span> i2 == m.<span class="hljs-built_in">length</span>() ? i1 - i2 : <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;abbztabbxabbg&quot;</span>;<br>    string m = <span class="hljs-string">&quot;abbg&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">KMP</span>(s, m) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串类算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀树</title>
    <link href="/2023/08/29/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    <url>/2023/08/29/%E5%89%8D%E7%BC%80%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> pass;<br>    <span class="hljs-type">int</span> end;<br><br>    <span class="hljs-comment">// 当字符种类非常多的时候（例如java中有六万多字符）</span><br>    <span class="hljs-comment">// 这个时候再去采用定长的数组显然不合适</span><br>    <span class="hljs-comment">// 可以采用hashmap来存放字符和node</span><br>    <span class="hljs-comment">// unordered_map&lt;char, shared_ptr&lt;TrieNode&gt;&gt; nexts;</span><br>    vector&lt;shared_ptr&lt;TrieNode&gt;&gt; nexts;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">TrieNode</span>()<br>    &#123;<br>        pass = <span class="hljs-number">0</span>;<br>        end = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// nexts[0] == nullptr,  没有走向&#x27;a&#x27;的路</span><br>        <span class="hljs-comment">// nexts[0] != nullptr,  有走向&#x27;a&#x27;的路</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// nexts[25] != nullptr</span><br>        nexts.<span class="hljs-built_in">resize</span>(<span class="hljs-number">26</span>, <span class="hljs-literal">nullptr</span>);<br>    &#125;<br>    ~<span class="hljs-built_in">TrieNode</span>()<br>    &#123;<br>        nexts.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    shared_ptr&lt;TrieNode&gt; root;<br>    <span class="hljs-built_in">Trie</span>()<br>    &#123;<br>        root = <span class="hljs-built_in">make_shared</span>&lt;TrieNode&gt;();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string word)</span></span><br><span class="hljs-function">    </span>&#123;<br>        TrieNode *node = root.<span class="hljs-built_in">get</span>();<br>        node-&gt;pass++;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; word.<span class="hljs-built_in">length</span>(); i++)<br>        &#123;<br>            index = word[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (node-&gt;nexts[index] == <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                node-&gt;nexts[index] = <span class="hljs-built_in">make_shared</span>&lt;TrieNode&gt;();<br>            &#125;<br>            node = node-&gt;nexts[index].<span class="hljs-built_in">get</span>();<br>            node-&gt;pass++;<br>        &#125;<br>        node-&gt;end++;<br>    &#125;<br><br>    <span class="hljs-comment">// word这个单词之前加入过几次</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(string word)</span></span><br><span class="hljs-function">    </span>&#123;<br>        TrieNode *node = root.<span class="hljs-built_in">get</span>();<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; word.<span class="hljs-built_in">length</span>(); i++)<br>        &#123;<br>            index = word[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (node-&gt;nexts[index] == <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            node = node-&gt;nexts[index].<span class="hljs-built_in">get</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> node-&gt;end;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除一个单词</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteWord</span><span class="hljs-params">(string word)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">search</span>(word) != <span class="hljs-number">0</span>)<br>        &#123;<br>            TrieNode *node = root.<span class="hljs-built_in">get</span>();<br>            node-&gt;pass--;<br>            <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; word.<span class="hljs-built_in">length</span>(); i++)<br>            &#123;<br>                index = word[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>                <span class="hljs-keyword">if</span> (--node-&gt;nexts[index].<span class="hljs-built_in">get</span>()-&gt;pass == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-comment">// 从当前已知p节点遍历到底去析构</span><br>                    shared_ptr&lt;TrieNode&gt; cur = node-&gt;nexts[index];<br>                    node-&gt;nexts[index].<span class="hljs-built_in">reset</span>();<br>                    node-&gt;nexts[index] = <span class="hljs-literal">nullptr</span>;<br>                    i++;<br>                    <span class="hljs-keyword">while</span> (node != <span class="hljs-literal">nullptr</span> &amp;&amp; i &lt; word.<span class="hljs-built_in">length</span>())<br>                    &#123;<br>                        node = cur-&gt;nexts[word[i] - <span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-built_in">get</span>();<br>                        node-&gt;nexts[index].<span class="hljs-built_in">reset</span>();<br>                        node-&gt;nexts[index] = <span class="hljs-literal">nullptr</span>;<br>                        cur = cur-&gt;nexts[word[++i] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                node = node-&gt;nexts[index].<span class="hljs-built_in">get</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 所有加入的字符串中，有几个是以pre这个字符串作为前缀的</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prefixNumber</span><span class="hljs-params">(string pre)</span></span><br><span class="hljs-function">    </span>&#123;<br>        TrieNode *node = root.<span class="hljs-built_in">get</span>();<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; pre.<span class="hljs-built_in">length</span>(); i++)<br>        &#123;<br>            index = pre[index] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (node-&gt;nexts[index] == <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            node = node-&gt;nexts[index].<span class="hljs-built_in">get</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> node-&gt;pass;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Trie t;<br>    t.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前缀树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dijkstra</title>
    <link href="/2023/08/29/Dijkstra/"/>
    <url>/2023/08/29/Dijkstra/</url>
    
    <content type="html"><![CDATA[<h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><p>Dijkstra</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;graph.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function">Node *<span class="hljs-title">getMinDistanceAndUnselectedNode</span><span class="hljs-params">(unordered_map&lt;Node *, <span class="hljs-type">int</span>&gt; &amp;distanceMap, unordered_set&lt;Node *&gt; &amp;selectedNodes)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node *minNode = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> minDistance = INT32_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;entry : distanceMap)<br>    &#123;<br>        Node *node = entry.first;<br>        <span class="hljs-type">int</span> distance = entry.second;<br>        <span class="hljs-comment">// 这个点如果已经被“锁定”，是不会去考虑的</span><br>        <span class="hljs-comment">// 只有当前节点没有被锁定，且距离更小我就去更新 minNode</span><br>        <span class="hljs-keyword">if</span> (selectedNodes.<span class="hljs-built_in">find</span>(node) == selectedNodes.<span class="hljs-built_in">end</span>() &amp;&amp; distance &lt; minDistance)<br>        &#123;<br>            minNode = node;<br>            minDistance = distance;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> minNode;<br>&#125;<br><br><span class="hljs-function">unordered_map&lt;Node *, <span class="hljs-type">int</span>&gt; <span class="hljs-title">dijkstra</span><span class="hljs-params">(Node *head)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">unordered_map</span>&lt;Node *, <span class="hljs-type">int</span>&gt;();<br>    &#125;<br><br>    <span class="hljs-comment">// 从 head 出发到所有点的最小距离</span><br>    <span class="hljs-comment">// key: 从head出发到达key</span><br>    <span class="hljs-comment">// value: 从head出发到达key的最小距离</span><br>    <span class="hljs-comment">// 如果表中没有某一个节点的数据，则说明head到这个节点的距离为无穷大</span><br>    unordered_map&lt;Node *, <span class="hljs-type">int</span>&gt; distanceMap;<br>    distanceMap.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(head, <span class="hljs-number">0</span>));<br>    <span class="hljs-comment">// 已经求过距离的节点，存放在selectedNodes中，以后再也不碰</span><br>    unordered_set&lt;Node *&gt; selectedNodes;<br><br>    <span class="hljs-comment">// Node *minNode = getMinDistanceAndUnselectedNode(distanceMap, selectedNodes);</span><br>    Node *minNode = head;<br>    <span class="hljs-keyword">while</span> (minNode != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> distance = distanceMap[minNode];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;edge : minNode-&gt;edges)<br>        &#123;<br>            Node *toNode = edge-&gt;to;<br>            <span class="hljs-keyword">if</span> (distanceMap.<span class="hljs-built_in">find</span>(toNode) == distanceMap.<span class="hljs-built_in">end</span>())<br>            &#123;<br>                distanceMap[toNode] = distance + edge-&gt;weight;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                distanceMap[toNode] = <span class="hljs-built_in">min</span>(distanceMap[toNode], distance + edge-&gt;weight);<br>            &#125;<br>        &#125;<br>        selectedNodes.<span class="hljs-built_in">insert</span>(minNode);<br>        minNode = <span class="hljs-built_in">getMinDistanceAndUnselectedNode</span>(distanceMap, selectedNodes);<br>    &#125;<br>    <span class="hljs-keyword">return</span> distanceMap;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; matrix = &#123;&#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">15</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;, <br>    &#123;<span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">200</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">200</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;, <br>    &#123;<span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">16</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">16</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;&#125;;<br>    shared_ptr&lt;Graph&gt; graph = <span class="hljs-built_in">creatGraph</span>(matrix);<br><br>    unordered_map&lt;Node *, <span class="hljs-type">int</span>&gt; res = <span class="hljs-built_in">dijkstra</span>(graph.<span class="hljs-built_in">get</span>()-&gt;nodes[<span class="hljs-number">1</span>].<span class="hljs-built_in">get</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : res)<br>    &#123;<br>        cout &lt;&lt; it.first-&gt;value &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; it.second &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图类算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P算法</title>
    <link href="/2023/08/29/P%E7%AE%97%E6%B3%95/"/>
    <url>/2023/08/29/P%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="prim-算法"><a href="#prim-算法" class="headerlink" title="prim 算法"></a>prim 算法</h1><p>prim 算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;graph.hpp&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;crtdbg.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cmpEdge</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> Edge *e1, <span class="hljs-type">const</span> Edge *e2)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> e1-&gt;weight &gt; e2-&gt;weight;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// Minimum Spanning Tree</span><br><span class="hljs-function">unordered_set&lt;Edge *&gt; <span class="hljs-title">primMST</span><span class="hljs-params">(Graph *graph)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 解锁的边进入小根堆</span><br>    priority_queue&lt;Edge *, vector&lt;Edge *&gt;, cmpEdge&gt; pq;<br>    unordered_set&lt;Node *&gt; myset;<br>    unordered_set&lt;Edge *&gt; result;<br><br>    <span class="hljs-comment">// 随便选择一个 Node 作为起点去解锁边</span><br>    <span class="hljs-comment">// 这里本来随便选一个 node 去处理即可，这里加上for循环遍历所有 node 仅仅是为了</span><br>    <span class="hljs-comment">// 处理森林的问题，因为可能会存在一个图有多个连通区域的情况</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;it : graph-&gt;nodes)<br>    &#123;<br>        <span class="hljs-comment">// 当前点不在 myset 点集合</span><br>        <span class="hljs-keyword">if</span> (myset.<span class="hljs-built_in">find</span>(it.second.<span class="hljs-built_in">get</span>()) == myset.<span class="hljs-built_in">end</span>())<br>        &#123;<br>            myset.<span class="hljs-built_in">insert</span>(it.second.<span class="hljs-built_in">get</span>());<br>            <span class="hljs-comment">// 解锁跟这条边相连的所有边</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;edge : it.second.<span class="hljs-built_in">get</span>()-&gt;edges)<br>            &#123;<br>                <span class="hljs-comment">// 小根堆加入重复值会怎样</span><br>                pq.<span class="hljs-built_in">push</span>(edge);<br>            &#125;<br>            <span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                <span class="hljs-comment">// 弹出解锁的边中权值最小的边</span><br>                Edge *edge = pq.<span class="hljs-built_in">top</span>();<br>                pq.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-comment">// 判断这个边的 toNode 是否在大集合里</span><br>                Node *toNode = edge-&gt;to;<br>                <span class="hljs-comment">// 不含有当前点则说明是新的点</span><br>                <span class="hljs-keyword">if</span> (myset.<span class="hljs-built_in">find</span>(toNode) == myset.<span class="hljs-built_in">end</span>())<br>                &#123;<br>                    result.<span class="hljs-built_in">insert</span>(edge);<br>                    <span class="hljs-comment">// 边会重复进入这个队列，即便重复的边被压入队列，但是由于toNode在大集合里面</span><br>                    <span class="hljs-comment">// 所有会直接跳过</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;nextEdge : toNode-&gt;edges)<br>                    &#123;<br>                        pq.<span class="hljs-built_in">push</span>(nextEdge);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq;<br>    pq.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    pq.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    pq.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    pq.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout &lt;&lt; pq.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>        pq.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图类算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K算法</title>
    <link href="/2023/08/29/K%E7%AE%97%E6%B3%95/"/>
    <url>/2023/08/29/K%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h1><p>Kruskal 算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;graph.hpp&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;crtdbg.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">K 算法实现</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 简单的并查集的实现</span><br><span class="hljs-comment">// 并查集的功能：1、查询(O(1)时间复杂度)；2、合并(O(1)时间复杂度)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">mySets</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// value 必须申请在堆上，list 类型指针也必须有唯一性，否则后面查讯集合是否为同一个集合复杂度会比较高</span><br>    <span class="hljs-comment">// 对于一般的算法机考题：Node*可以用int代替，对于list&lt;Node*&gt;*可以定义一个list&lt;Node*&gt;* arr[nodeSize]的数组</span><br>    <span class="hljs-comment">// 然后value部分也用int表示</span><br>    unordered_map&lt;Node *, list&lt;Node *&gt; *&gt; setMap;<br>    <span class="hljs-comment">// just for delete</span><br>    vector&lt;list&lt;Node *&gt; *&gt; newArr;<br><br>    <span class="hljs-built_in">mySets</span>(list&lt;Node *&gt; nodes)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;cur : nodes)<br>        &#123;<br>            list&lt;Node *&gt; *set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">list</span>&lt;Node *&gt;();<br>            newArr.<span class="hljs-built_in">push_back</span>(set);<br>            set-&gt;<span class="hljs-built_in">emplace_back</span>(cur);<br>            setMap.<span class="hljs-built_in">emplace</span>(cur, set);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询是否为同一个集合</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSameSet</span><span class="hljs-params">(Node *from, Node *to)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (setMap.<span class="hljs-built_in">find</span>(from) == setMap.<span class="hljs-built_in">end</span>() || setMap.<span class="hljs-built_in">find</span>(to) == setMap.<span class="hljs-built_in">end</span>())<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        list&lt;Node *&gt; *fromSet = setMap[from];<br>        list&lt;Node *&gt; *toSet = setMap[to];<br>        <span class="hljs-keyword">return</span> fromSet == toSet;<br>    &#125;<br><br>    <span class="hljs-comment">// 合并集合，这里时间复杂度是O(N)</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unionSet</span><span class="hljs-params">(Node *from, Node *to)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (setMap.<span class="hljs-built_in">find</span>(from) == setMap.<span class="hljs-built_in">end</span>() || setMap.<span class="hljs-built_in">find</span>(to) == setMap.<span class="hljs-built_in">end</span>())<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        list&lt;Node *&gt; *fromSet = setMap[from];<br>        list&lt;Node *&gt; *toSet = setMap[to];<br>        <span class="hljs-comment">// 将 toSet 集合中所有的节点全部由fromSet负责</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;toNode : *toSet)<br>        &#123;<br>            fromSet-&gt;<span class="hljs-built_in">emplace_back</span>(toNode);<br>            setMap[toNode] = fromSet;<br>        &#125;<br><br>        <span class="hljs-comment">// 在这里 delete toSet 或者再创建一个用于delete回收的数组</span><br>    &#125;<br><br>    <span class="hljs-comment">// 析构函数释放申请的 list 类型指针</span><br>    ~<span class="hljs-built_in">mySets</span>()<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;it : newArr)<br>        &#123;<br>            <span class="hljs-keyword">delete</span> it;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cmpEdge</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> Edge *e1, <span class="hljs-type">const</span> Edge *e2)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> e1-&gt;weight &gt; e2-&gt;weight;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">unordered_set&lt;Edge *&gt; <span class="hljs-title">kruskalMST</span><span class="hljs-params">(Graph *graph)</span></span><br><span class="hljs-function"></span>&#123;<br>    list&lt;Node *&gt; nodes;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;it : graph-&gt;nodes)<br>    &#123;<br>        nodes.<span class="hljs-built_in">emplace_back</span>(it.second.<span class="hljs-built_in">get</span>());<br>    &#125;<br>    <span class="hljs-function">mySets <span class="hljs-title">myset</span><span class="hljs-params">(nodes)</span></span>;<br>    <span class="hljs-comment">// 以 Edge 的 weight 属性来构建小根堆</span><br>    priority_queue&lt;Edge *, vector&lt;Edge *&gt;, cmpEdge&gt; pq;<br>    <span class="hljs-comment">// M 条边 O(logM)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;edge : graph-&gt;edges)<br>    &#123;<br>        pq.<span class="hljs-built_in">push</span>(edge.<span class="hljs-built_in">get</span>());<br>    &#125;<br><br>    unordered_set&lt;Edge *&gt; res;<br>    <span class="hljs-comment">// M 条边 O(logM)</span><br>    <span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        Edge *edge = pq.<span class="hljs-built_in">top</span>();<br>        pq.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">// O(1)</span><br>        <span class="hljs-keyword">if</span> (!myset.<span class="hljs-built_in">isSameSet</span>(edge-&gt;from, edge-&gt;to))<br>        &#123;<br>            res.<span class="hljs-built_in">insert</span>(edge);<br>            <span class="hljs-comment">// 这里用真正的并查集可以做到 O(1)</span><br>            myset.<span class="hljs-built_in">unionSet</span>(edge-&gt;from, edge-&gt;to);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Node <span class="hljs-title">n1</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">Node <span class="hljs-title">n2</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>;<br>    <span class="hljs-function">Node <span class="hljs-title">n3</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>;<br>    list&lt;Node *&gt; nodes = &#123;&amp;n1, &amp;n2, &amp;n3&#125;;<br>    <span class="hljs-function">mySets <span class="hljs-title">set</span><span class="hljs-params">(nodes)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;it : *(set.setMap[&amp;n2]))<br>    &#123;<br>        cout &lt;&lt; it-&gt;value &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-comment">// _CrtDumpMemoryLeaks();//检测内存泄露</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; matrix = &#123;&#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">1000</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">100000</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;&#125;;<br>    shared_ptr&lt;Graph&gt; graph = <span class="hljs-built_in">creatGraph</span>(matrix);<br>    unordered_set&lt;Edge *&gt; res = <span class="hljs-built_in">kruskalMST</span>(graph.<span class="hljs-built_in">get</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp; it : res)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;weight: &quot;</span> &lt;&lt; it-&gt;weight &lt;&lt; <span class="hljs-string">&quot;; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;from: &quot;</span> &lt;&lt; it-&gt;from-&gt;value &lt;&lt; <span class="hljs-string">&quot;; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;to: &quot;</span> &lt;&lt; it-&gt;to-&gt;value &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test2</span>();<br><br>    _CrtDumpMemoryLeaks(); <span class="hljs-comment">// 检测内存泄露</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图类算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度优先搜索</title>
    <link href="/2023/08/29/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2023/08/29/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><p>深度优先搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;graph.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(Node *node)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    stack&lt;Node *&gt; sta;<br>    unordered_set&lt;Node *&gt; hashset;<br>    sta.<span class="hljs-built_in">push</span>(node);<br>    hashset.<span class="hljs-built_in">insert</span>(node);<br>    <span class="hljs-comment">// todo</span><br>    cout &lt;&lt; node-&gt;value &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (!sta.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        Node *cur = sta.<span class="hljs-built_in">top</span>();<br>        sta.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;next : cur-&gt;nexts)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (hashset.<span class="hljs-built_in">find</span>(next) == hashset.<span class="hljs-built_in">end</span>())<br>            &#123;<br>                sta.<span class="hljs-built_in">push</span>(cur);<br>                sta.<span class="hljs-built_in">push</span>(next);<br>                hashset.<span class="hljs-built_in">insert</span>(next);<br>                <span class="hljs-comment">// todo</span><br>                cout &lt;&lt; next-&gt;value &lt;&lt; endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图类算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广度优先搜索</title>
    <link href="/2023/08/29/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2023/08/29/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><p>广度优先搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;graph.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(Node *node)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// queue&lt;Node*, list&lt;Node*&gt;&gt; que;</span><br>    queue&lt;Node *&gt; que;<br>    unordered_set&lt;Node *&gt; hashset;<br>    que.<span class="hljs-built_in">push</span>(node);<br>    hashset.<span class="hljs-built_in">insert</span>(node);<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        Node *cur = que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">// todo</span><br>        cout &lt;&lt; cur-&gt;value &lt;&lt; endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;next : cur-&gt;nexts)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (hashset.<span class="hljs-built_in">find</span>(next) == hashset.<span class="hljs-built_in">end</span>())<br>            &#123;<br>                hashset.<span class="hljs-built_in">insert</span>(next);<br>                que.<span class="hljs-built_in">push</span>(next);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;graph.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;crtdbg.h&gt;</span></span><br><br>vector&lt;vector&lt;Node *&gt;&gt; <span class="hljs-built_in">sortedTopology</span>(Graph *graph)<br>&#123;<br>    <span class="hljs-comment">// key: 某一个node， value: 剩余的入度</span><br>    unordered_map&lt;Node *, <span class="hljs-type">int</span>&gt; inMap;<br>    <span class="hljs-comment">// 入度为 0 的 node 才能进这个队列</span><br>    queue&lt;Node *&gt; zeroInQue;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;node : graph-&gt;nodes)<br>    &#123;<br>        inMap[node.second.<span class="hljs-built_in">get</span>()] = node.second.<span class="hljs-built_in">get</span>()-&gt;in;<br>        <span class="hljs-keyword">if</span> (node.second.<span class="hljs-built_in">get</span>()-&gt;in == <span class="hljs-number">0</span>)<br>        &#123;<br>            zeroInQue.<span class="hljs-built_in">push</span>(node.second.<span class="hljs-built_in">get</span>());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// count1 表示批量编译了几次；count2 表示总共有多少文件被成功编译了</span><br>    <span class="hljs-comment">// 如果 count2 != graph-&gt;nodes.size() 则说明图中存在环（ps：隔离开的两个图也是能编译的）</span><br>    <span class="hljs-type">int</span> count1 = <span class="hljs-number">0</span>, count2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 拓扑排序的结果放入result</span><br>    vector&lt;vector&lt;Node *&gt;&gt; result;<br>    <span class="hljs-keyword">while</span> (!zeroInQue.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> size = zeroInQue.<span class="hljs-built_in">size</span>();<br>        result.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;Node*&gt;());<br>        <span class="hljs-keyword">while</span> (size--)<br>        &#123;<br>            Node *cur = zeroInQue.<span class="hljs-built_in">front</span>();<br>            zeroInQue.<span class="hljs-built_in">pop</span>();<br>            result[count1].<span class="hljs-built_in">push_back</span>(cur);<br>            count2++;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp; next : cur-&gt;nexts)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(--inMap[next] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    zeroInQue.<span class="hljs-built_in">push</span>(next);<br>                &#125;<br>            &#125;<br>        &#125;<br>        count1++;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (count2 != graph-&gt;nodes.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;There is a cyclic dependency&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// vector&lt;vector&lt;int&gt;&gt; matrix = &#123;&#123;1, 1, 2&#125;, &#123;1, 2, 3&#125;, &#123;1, 3, 4&#125;, &#123;1, 1, 5&#125;, &#123;1, 1, 3&#125;, &#123;1, 2, 4&#125;&#125;;</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; matrix = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;&#125;;<br><br>    shared_ptr&lt;Graph&gt; graph = <span class="hljs-built_in">creatGraph</span>(matrix);<br>    vector&lt;vector&lt;Node *&gt;&gt; res = <span class="hljs-built_in">sortedTopology</span>(graph.<span class="hljs-built_in">get</span>());<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br>    _CrtDumpMemoryLeaks();<span class="hljs-comment">//检测内存泄露</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图类算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图的构建</title>
    <link href="/2023/08/29/%E5%9B%BE%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <url>/2023/08/29/%E5%9B%BE%E7%9A%84%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="图的构建"><a href="#图的构建" class="headerlink" title="图的构建"></a>图的构建</h1><p>图的构建</p><p><code>graph.hpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-comment">// in表示一个点的入度，表示有多少个有向边的箭头指向它</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> in;<br>    <span class="hljs-comment">// out表示一个点的出度，表示有多少个边是从这个点指向外面的</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> out;<br>    vector&lt;Node*&gt; nexts;<br>    vector&lt;Edge*&gt; edges;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> val)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;value = val;<br>        in = <span class="hljs-number">0</span>;<br>        out = <span class="hljs-number">0</span>;<br>        nexts = <span class="hljs-built_in">vector</span>&lt;Node*&gt;();<br>        edges = <span class="hljs-built_in">vector</span>&lt;Edge*&gt;();<br>    &#125;<br>    ~<span class="hljs-built_in">Node</span>()<br>    &#123;<br>        nexts.<span class="hljs-built_in">clear</span>();<br>        edges.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> weight;<br>    Node* from;<br>    Node* to;<br>    <span class="hljs-built_in">Edge</span>(<span class="hljs-type">int</span> wei, Node* f, Node* t)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;weight = wei;<br>        <span class="hljs-keyword">this</span>-&gt;from = f;<br>        <span class="hljs-keyword">this</span>-&gt;to = t;<br>    &#125;<br>    <span class="hljs-built_in">Edge</span>(Node* f, Node* t)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;from = f;<br>        <span class="hljs-keyword">this</span>-&gt;to = t;<br>    &#125;<br>    ~<span class="hljs-built_in">Edge</span>()<br>    &#123;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 把所有的点集和边集合都委托给Graph结构来管理</span><br>    unordered_map&lt;<span class="hljs-type">int</span>, shared_ptr&lt;Node&gt;&gt; nodes;<br>    unordered_set&lt;shared_ptr&lt;Edge&gt;&gt; edges;<br>    <span class="hljs-built_in">Graph</span>()<br>    &#123;<br>        nodes = unordered_map&lt;<span class="hljs-type">int</span>, shared_ptr&lt;Node&gt;&gt;();<br>        edges = unordered_set&lt;shared_ptr&lt;Edge&gt;&gt;();<br>    &#125;<br>    ~<span class="hljs-built_in">Graph</span>()<br>    &#123;<br>        nodes.<span class="hljs-built_in">clear</span>();<br>        edges.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// matrix 每一行表示图中的边</span><br><span class="hljs-comment">// 必须为N*3的矩阵</span><br><span class="hljs-comment">// [weight, fromNode, toNode]</span><br><span class="hljs-function">std::shared_ptr&lt;Graph&gt; <span class="hljs-title">creatGraph</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// shared_ptr&lt;Graph&gt; graph = make_shared&lt;Graph&gt;(Graph());</span><br>    shared_ptr&lt;Graph&gt; graph = <span class="hljs-built_in">shared_ptr</span>&lt;Graph&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Graph</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; matrix.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-type">int</span> weight = matrix[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> from = matrix[i][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> to = matrix[i][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span> (graph.<span class="hljs-built_in">get</span>()-&gt;nodes.<span class="hljs-built_in">find</span>(from) == graph.<span class="hljs-built_in">get</span>()-&gt;nodes.<span class="hljs-built_in">end</span>())<br>        &#123;<br>            graph.<span class="hljs-built_in">get</span>()-&gt;nodes[from] = <span class="hljs-built_in">shared_ptr</span>&lt;Node&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(from));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (graph.<span class="hljs-built_in">get</span>()-&gt;nodes.<span class="hljs-built_in">find</span>(to) == graph.<span class="hljs-built_in">get</span>()-&gt;nodes.<span class="hljs-built_in">end</span>())<br>        &#123;<br>            graph.<span class="hljs-built_in">get</span>()-&gt;nodes[to] = <span class="hljs-built_in">shared_ptr</span>&lt;Node&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(to));<br>        &#125;<br>        Node* fromNode = graph.<span class="hljs-built_in">get</span>()-&gt;nodes[from].<span class="hljs-built_in">get</span>();<br>        Node* toNode = graph.<span class="hljs-built_in">get</span>()-&gt;nodes[to].<span class="hljs-built_in">get</span>();<br>        shared_ptr&lt;Edge&gt; newEdge = <span class="hljs-built_in">shared_ptr</span>&lt;Edge&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Edge</span>(weight, fromNode, toNode));<br>        fromNode-&gt;nexts.<span class="hljs-built_in">emplace_back</span>(toNode);<br>        fromNode-&gt;out++;<br>        toNode-&gt;in++;<br>        fromNode-&gt;edges.<span class="hljs-built_in">emplace_back</span>(newEdge.<span class="hljs-built_in">get</span>());<br>        graph.<span class="hljs-built_in">get</span>()-&gt;edges.<span class="hljs-built_in">insert</span>(newEdge);<br>    &#125;<br>    <span class="hljs-comment">// new int(1);</span><br>    <span class="hljs-comment">// 0 内存泄漏！！！</span><br>    <span class="hljs-keyword">return</span> graph;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><code>testGraph.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;graph.hpp&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;crtdbg.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; matrix = &#123; &#123;<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125; &#125;;<br>    shared_ptr&lt;Graph&gt; graph = <span class="hljs-built_in">creatGraph</span>(matrix);<br>    cout &lt;&lt; graph.<span class="hljs-built_in">get</span>()-&gt;nodes[<span class="hljs-number">1</span>].<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;<br><br>    graph.<span class="hljs-built_in">reset</span>();<br><br>    cout &lt;&lt; graph.<span class="hljs-built_in">get</span>()-&gt;nodes[<span class="hljs-number">1</span>].<span class="hljs-built_in">use_count</span>() &lt;&lt; endl;<br><br>    _CrtDumpMemoryLeaks();<span class="hljs-comment">//检测内存泄露</span><br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h1><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><p>使用 shared_ptr 可以避免许多内存泄漏的情况，但不是所有情况都能解决。shared_ptr 依赖于引用计数技术，它会记录指向对象的指针数量，当数量为 0 时自动删除对象。但是，在某些情况下仍然可能发生内存泄漏。以下是可能会导致内存泄漏的情况：</p><p>循环引用。如果你的对象存在循环引用，即使你使用 shared_ptr，也可能会发生内存泄漏。例如，如果对象A中包含一个 std::shared_ptr&lt;B&gt;，而对象B中包含一个 std::shared_ptr&lt;A&gt;，那么当你删除对象A和B时，它们之间互相持有的指针数量永远不会变成 0，从而导致内存泄漏。</p><p>基类和派生类之间的显式指针。如果你使用了基类和派生类之间的显式指针，可能会导致内存泄漏，因为引用计数技术无法追踪这些指针。例如，如果你使用了一个 std::shared_ptr&lt;A&gt;，并将其指向了派生类B的实例，那么当你删除该 shared_ptr 时，B 对象中的成员变量仍然可能包含指向 A 对象的指针，从而导致内存泄漏。</p><p>自定义删除器。 如果你使用 shared_ptr 自定义了删除器，那么你需要确保你的删除器适当地清理了指针持有的资源。否则，你可能会在删除对象时发生内存泄漏。</p><p>shared_ptr 和 new[] 的组合。 如果你使用了 std::shared_ptr 来管理一个使用 new[] 分配的数组，你需要使用 std::shared_ptr 提供的定制删除器，以避免内存泄漏。原因是 std::shared_ptr 并不知道它指向的是一个数组，而 delete 只能删除由 new 分配的单个对象。</p><p>总之，虽然 std::shared_ptr 可以减少内存泄漏的情况，但并不能完全避免。你需要注意以避免上述情况，从而减少内存泄漏的发生。如果你使用 _CrtDumpMemoryLeaks 或其他工具来检测内存泄漏，你应该注意该工具是否对 std::shared_ptr 的使用进行了正确的跟踪。</p><h2 id="CrtDumpMemoryLeaks"><a href="#CrtDumpMemoryLeaks" class="headerlink" title="_CrtDumpMemoryLeaks"></a>_CrtDumpMemoryLeaks</h2><p>_CrtDumpMemoryLeaks 是 VC++ 提供用于检测内存泄漏的函数，它是定义在 crtdbg.h 头文件中的。</p><p>在 C&#x2F;C++ 语言开发中，内存泄漏是一种很严重的问题。某些情况下，程序员开发的代码中申请了内存空间但没有释放，导致内存泄漏的情况出现。内存泄漏会导致程序运行变慢，有时还会引发崩溃、卡死等问题。</p><p>为了及时发现和解决内存泄漏问题，可以使用 _CrtDumpMemoryLeaks 函数来检测有没有内存泄漏。使用该函数时，需要包含 crtdbg.h 头文件，并将_CRTDBG_LEAK_CHECK_DF 宏设置为 _CrtSetDbgFlag 函数的参数，然后程序运行结束后就会在调试输出中显示内存泄漏的信息。如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRTDBG_MAP_ALLOC</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;crtdbg.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);<br>    <span class="hljs-comment">// do something</span><br>    _CrtDumpMemoryLeaks();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>k算法和p算法都是仅仅针对无向图的算法</p><h3 id="kruskal-算法"><a href="#kruskal-算法" class="headerlink" title="kruskal 算法"></a>kruskal 算法</h3><p>算法思想和证明方式</p><p>k算法：每次选择权值最小的边，如果不存在环，则收集。否者进入下一次循环选择权值最小的边。直到所有的边都遍历过一遍。 那么如果判断是否存在环，用并集技巧。</p><h3 id="prim-算法"><a href="#prim-算法" class="headerlink" title="prim 算法"></a>prim 算法</h3><p>K算法可能有一个集合被吞入另一个集合的情况，谁被吞不确定，但P算法只有一个大集合</p><p>就是k算法可能有一个一个点往集合里加的情况，也可能有一片一片的加的情况</p><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>从规定的出发节点到所有节点的最短路径</p><p>适用范围：不能有累加和为负数的环</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图的构建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人项目</title>
    <link href="/2023/08/29/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/08/29/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="流媒体项目"><a href="#流媒体项目" class="headerlink" title="流媒体项目"></a>流媒体项目</h1><p><img src="%E6%B5%81%E5%AA%92%E4%BD%93%E9%A1%B9%E7%9B%AE1.png" alt="流媒体项目"></p><p><img src="%E6%B5%81%E5%AA%92%E4%BD%93%E9%A1%B9%E7%9B%AE2.png" alt="流媒体项目"></p><p><img src="%E6%B5%81%E5%AA%92%E4%BD%93%E9%A1%B9%E7%9B%AE3.png" alt="流媒体项目"></p>]]></content>
    
    
    <categories>
      
      <category>个人项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>whc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2023/08/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2023/08/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划的四种模型"><a href="#动态规划的四种模型" class="headerlink" title="动态规划的四种模型"></a>动态规划的四种模型</h1><p>解决动态规划问题的一般思路：先写出暴力“尝试”的方法（递归、人的自然智慧），然后基于暴力递归看是否右重复求解的情况来写出“傻缓存”的方法，最后尝试基于暴力递归写出动态优化的版本</p><h2 id="从左向右的尝试模型"><a href="#从左向右的尝试模型" class="headerlink" title="从左向右的尝试模型"></a>从左向右的尝试模型</h2><p><code>经典题型</code>：斐波那契数列、走楼梯</p><h2 id="范围尝试模型"><a href="#范围尝试模型" class="headerlink" title="范围尝试模型"></a>范围尝试模型</h2><p><code>经典题型</code>：机器人走路（1~N的位置上）、马在棋盘上跳（棋盘大小为10*9）、01背包问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 假设有排成一行的N个位置，记为1~N,N一定大于或等于2开始时机器人在其中的M位置上(M一定是1~N中的一个)</span><br><span class="hljs-comment">// 如果机器人来到1位置，那么下一步只能往右来到2位置﹔如果机器人来到N位置，那么下一步只能往左来到N-1位置;</span><br><span class="hljs-comment">// 如果机器人来到中间位置，那么下一步可以往左走或者往右走;</span><br><span class="hljs-comment">// 规定机器人必须走K步，最终能来到P位置(P也是1~N中的一个)的方法有多少种给定四个参数N、M、K、P，返回方法数。</span><br><br><br><span class="hljs-comment">// 机器人当前来到的位置是cur,</span><br><span class="hljs-comment">// 机器人还有rest步需要去走,</span><br><span class="hljs-comment">// 最终的目标是aim,</span><br><span class="hljs-comment">// 有哪些位置?1~N</span><br><span class="hljs-comment">// 返回:机器人从cur出发,走过rest步之后,最终停在aim的方法数,是多少?</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">process1</span><span class="hljs-params">(<span class="hljs-type">int</span> cur, <span class="hljs-type">int</span> rest, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// base case</span><br>    <span class="hljs-keyword">if</span> (rest == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// 经过 rest 步之后最终到达 aim，则说明这是一次成功的暴力递归搜索到的方法</span><br>        <span class="hljs-keyword">return</span> cur == aim ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// rest &gt; 0 还剩有步数</span><br>    <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">// 1 -&gt; 2</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">process1</span>(<span class="hljs-number">2</span>, rest - <span class="hljs-number">1</span>, aim, N);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cur == N)<br>    &#123;<br>        <span class="hljs-comment">// N-1 &lt;- N</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">process1</span>(N - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N);<br>    &#125;<br>    <span class="hljs-comment">// 中间位置上</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">process1</span>(cur - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N) + <span class="hljs-built_in">process1</span>(cur + <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">ways1</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> K)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">2</span> || start &lt; <span class="hljs-number">1</span> || start &gt; N || aim &lt; <span class="hljs-number">1</span> || aim &gt; N || K &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">process1</span>(start, K, aim, N);<br>&#125;<br><br><span class="hljs-comment">// cur的范围：1~N</span><br><span class="hljs-comment">// rest的范围：0~K</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">process2</span><span class="hljs-params">(<span class="hljs-type">int</span> cur, <span class="hljs-type">int</span> rest, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> N, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; &amp;dp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dp[cur][rest] != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> dp[cur][rest];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (rest == <span class="hljs-number">0</span>)<br>    &#123;<br>        ans = cur == aim ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">1</span>)<br>    &#123;<br>        ans = <span class="hljs-built_in">process2</span>(<span class="hljs-number">2</span>, rest - <span class="hljs-number">1</span>, aim, N, dp);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur == N)<br>    &#123;<br>        ans = <span class="hljs-built_in">process2</span>(N - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N, dp);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ans = <span class="hljs-built_in">process2</span>(cur - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N, dp) + <span class="hljs-built_in">process2</span>(cur + <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N, dp);<br>    &#125;<br>    dp[cur][rest] = ans;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">// 缓存的方法: 确保了重复的过程只会进入一遍</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">ways2</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> K)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(K + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">process2</span>(start, K, aim, N, dp);<br>&#125;<br><br><span class="hljs-comment">// 动态规划 状态转移矩阵</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">ways3</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> K)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(K + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    dp[aim][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rest = <span class="hljs-number">1</span>; rest &lt;= K; rest++)<br>    &#123;<br>        <span class="hljs-comment">// 当机器人来到边界位置的时候只依赖一个位置</span><br>        dp[<span class="hljs-number">1</span>][rest] = dp[<span class="hljs-number">2</span>][rest - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cur = <span class="hljs-number">2</span>; cur &lt; N; cur++)<br>        &#123;<br>            <span class="hljs-comment">// 当机器人来到中间的位置的时候依赖的是左右两个位置</span><br>            dp[cur][rest] = dp[cur - <span class="hljs-number">1</span>][rest - <span class="hljs-number">1</span>] + dp[cur + <span class="hljs-number">1</span>][rest - <span class="hljs-number">1</span>];<br>        &#125;<br>        dp[N][rest] = dp[N - <span class="hljs-number">1</span>][rest - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-comment">// 最终要返回 start 位置开始走 K 步到 aim 的方法数</span><br>    <span class="hljs-keyword">return</span> dp[start][K];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 从 start 位置开始</span><br>    <span class="hljs-type">int</span> start = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 走 K 步</span><br>    <span class="hljs-type">int</span> K = <span class="hljs-number">6</span>;<br>    <span class="hljs-comment">// 目标位置是 aim</span><br>    <span class="hljs-type">int</span> aim = <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 总共有 1~N 个位置</span><br>    <span class="hljs-type">int</span> N = <span class="hljs-number">5</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">ways1</span>(N, start, aim, K) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-built_in">ways2</span>(N, start, aim, K) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-built_in">ways3</span>(N, start, aim, K) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 给定长度都为N的数组weights和values，weights[i]values[i]分别代表</span><br><span class="hljs-comment">// i号物品的重量和价值。给定一个正数bag，表示一个载重bag的袋子</span><br><span class="hljs-comment">// 你装的物品不能超过这个重量。返回你能装的最大价值是多少？</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">// i... 的货物自由选择，形成的最大价值返回</span><br><span class="hljs-comment">// 重量永远不要超过bag</span><br><span class="hljs-comment">// 之前做的决定，所达到的重量，alreadyweight</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">process1</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;weights, vector&lt;<span class="hljs-type">int</span>&gt; &amp;values, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> alreadyweight, <span class="hljs-type">int</span> bag)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (alreadyweight &gt; bag)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 没有货物的最大价值当然为0</span><br>    <span class="hljs-keyword">if</span> (i == weights.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">process1</span>(weights, values, i + <span class="hljs-number">1</span>, alreadyweight, bag),<br>               values[i] + <span class="hljs-built_in">process1</span>(weights, values, i + <span class="hljs-number">1</span>, alreadyweight + weights[i], bag));<br>&#125;<br><span class="hljs-comment">// 另外一种暴力递归的写法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">process2</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;weights, vector&lt;<span class="hljs-type">int</span>&gt; &amp;values, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> alreadyWeight, <span class="hljs-type">int</span> alreadyValue, <span class="hljs-type">int</span> bag)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (alreadyWeight &gt; bag)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (i == values.<span class="hljs-built_in">size</span>())<br>        <span class="hljs-keyword">return</span> alreadyValue;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">process2</span>(weights, values, i + <span class="hljs-number">1</span>, alreadyWeight, alreadyValue, bag),<br>               <span class="hljs-built_in">process2</span>(weights, values, i + <span class="hljs-number">1</span>, alreadyWeight + weights[i], alreadyValue + values[i], bag));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxValue</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;weights, vector&lt;<span class="hljs-type">int</span>&gt; &amp;values, <span class="hljs-type">int</span> bag)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">process1</span>(weights, values, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bag);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="样本对应模型"><a href="#样本对应模型" class="headerlink" title="样本对应模型"></a>样本对应模型</h2><p><code>经典题型</code>：最长公共子序列、最长回文子序列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 最长公共子序列</span><br><br><span class="hljs-comment">// str1[0...j] str2[0...j]最长公共子序列多长</span><br><span class="hljs-comment">// 返回</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">process1</span><span class="hljs-params">(string &amp;str1, string &amp;str2, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> str1[i] == str2[j] ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] == str2[j])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">process1</span>(str1, str2, i, j - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] == str2[j])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">process1</span>(str1, str2, i - <span class="hljs-number">1</span>, j);<br>    &#125;<br>    <span class="hljs-comment">// i != 0 &amp;&amp; j != 0</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 考虑最长公共子序列以 str1[i] 结尾的情况</span><br>        <span class="hljs-type">int</span> p1 = <span class="hljs-built_in">process1</span>(str1, str2, i, j - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 考虑最长公共子序列以 str2[j] 结尾的情况</span><br>        <span class="hljs-type">int</span> p2 = <span class="hljs-built_in">process1</span>(str1, str2, i - <span class="hljs-number">1</span>, j);<br>        <span class="hljs-comment">// 最长公共子序列必须以 str1[i] 和 str2[j] 结尾，但是有这两个字符相等的前提</span><br>        <span class="hljs-type">int</span> p3 = str1[i] == str2[j] ? (<span class="hljs-number">1</span> + <span class="hljs-built_in">process1</span>(str1, str2, i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>)) : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(p1, <span class="hljs-built_in">max</span>(p2, p3));<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestCommonSubsequence1</span><span class="hljs-params">(string &amp;text1, string &amp;text2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (text1.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> || text2.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">process1</span>(text1, text2, text1.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, text2.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestCommonSubsequence2</span><span class="hljs-params">(string &amp;text1, string &amp;text2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (text1.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> || text2.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> N = text1.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> M = text2.<span class="hljs-built_in">size</span>();<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(M, <span class="hljs-number">0</span>));<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = text1[<span class="hljs-number">0</span>] == text2[<span class="hljs-number">0</span>] ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; M; j++)<br>    &#123;<br>        dp[<span class="hljs-number">0</span>][j] = text1[<span class="hljs-number">0</span>] == text2[j] ? <span class="hljs-number">1</span> : dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        dp[i][<span class="hljs-number">0</span>] = text1[i] == text2[<span class="hljs-number">0</span>] ? <span class="hljs-number">1</span> : dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; M; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> p1 = dp[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-type">int</span> p2 = dp[i][j - <span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> p3 = text1[i] == text2[j] ? (<span class="hljs-number">1</span> + dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) : <span class="hljs-number">0</span>;<br>            dp[i][j] = <span class="hljs-built_in">max</span>(p1, <span class="hljs-built_in">max</span>(p2, p3));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[N - <span class="hljs-number">1</span>][M - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string text1 = <span class="hljs-string">&quot;1a2a34a56&quot;</span>;<br>    string text2 = <span class="hljs-string">&quot;afdgafgfd123456dhasgfagfarug&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">longestCommonSubsequence1</span>(text1, text2) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-built_in">longestCommonSubsequence2</span>(text1, text2) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="业务限制模型"><a href="#业务限制模型" class="headerlink" title="业务限制模型"></a>业务限制模型</h2><p><code>经典题型</code>：咖啡杯问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 给定一个数组arr,arr[i]代表第i号咖啡机泡一杯咖啡的时间</span><br><span class="hljs-comment">// 给定一个正数N，表示N个人等着咖啡机泡咖啡，每台咖啡机只能轮流泡咖啡</span><br><span class="hljs-comment">// 只有一台咖啡机，一次只能洗一个杯子，时间耗费a，洗完才能洗下一杯</span><br><span class="hljs-comment">// 每个咖啡杯也可以自己挥发干净，时间耗费b，咖啡杯可以并行挥发</span><br><span class="hljs-comment">// 假设所有人拿到咖啡之后立刻喝干净，</span><br><span class="hljs-comment">// 返回从开始等到所有咖啡机变干净的最短时间</span><br><span class="hljs-comment">// 三个参数:int[]arr、int N, int a、int b</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Machine</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> timePoint;<br>    <span class="hljs-type">int</span> workTime;<br>    <span class="hljs-built_in">Machine</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> w) : <span class="hljs-built_in">timePoint</span>(t), <span class="hljs-built_in">workTime</span>(w) &#123;&#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Machine &amp;m1) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> timePoint + workTime &gt; m1.timePoint + m1.workTime;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// drinks 所有杯子开始洗的时间；升序</span><br><span class="hljs-comment">// wash 单杯洗干净的时间（串行）</span><br><span class="hljs-comment">// air 挥发干净的时间（并行）</span><br><span class="hljs-comment">// free 洗咖啡杯的机器什么时候可用</span><br><span class="hljs-comment">// drinks[index ... ] 都变干净，最早的时间返回</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">bestTime</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;drinks, <span class="hljs-type">int</span> wash, <span class="hljs-type">int</span> air, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> free)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (index == drinks.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// index 号杯子决定洗</span><br>    <span class="hljs-type">int</span> selfClean1 = <span class="hljs-built_in">max</span>(drinks[index], free) + wash;<br>    <span class="hljs-type">int</span> restClean1 = <span class="hljs-built_in">bestTime</span>(drinks, wash, air, index + <span class="hljs-number">1</span>, selfClean1);<br>    <span class="hljs-type">int</span> p1 = <span class="hljs-built_in">max</span>(selfClean1, restClean1);<br>    <span class="hljs-comment">// index 号杯子决定挥发</span><br>    <span class="hljs-type">int</span> selfClean2 = drinks[index] + air;<br>    <span class="hljs-type">int</span> restClean2 = <span class="hljs-built_in">bestTime</span>(drinks, wash, air, index + <span class="hljs-number">1</span>, free);<br>    <span class="hljs-type">int</span> p2 = <span class="hljs-built_in">max</span>(selfClean2, restClean2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(p1, p2);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">bestTimeDp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;drinks, <span class="hljs-type">int</span> wash, <span class="hljs-type">int</span> air)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> N = drinks.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> maxFree = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    &#123;<br>        maxFree = <span class="hljs-built_in">max</span>(maxFree, drinks[i]) + wash;<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(maxFree + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br><br>    <span class="hljs-comment">// dp[N][...] = 0;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index = N - <span class="hljs-number">1</span>; index &gt;= <span class="hljs-number">0</span>; index--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> free = <span class="hljs-number">0</span>; free &lt;= maxFree; free++)<br>        &#123;<br>            <span class="hljs-type">int</span> selfClean1 = <span class="hljs-built_in">max</span>(drinks[index], free) + wash;<br>            <span class="hljs-keyword">if</span> (selfClean1 &gt; maxFree)<br>            &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> restClean1 = dp[index + <span class="hljs-number">1</span>][selfClean1];<br>            <span class="hljs-type">int</span> p1 = <span class="hljs-built_in">max</span>(selfClean1, restClean1);<br><br>            <span class="hljs-type">int</span> selfClean2 = drinks[index] + air;<br>            <span class="hljs-type">int</span> restClean2 = dp[index + <span class="hljs-number">1</span>][free];<br>            <span class="hljs-type">int</span> p2 = <span class="hljs-built_in">max</span>(selfClean2, restClean2);<br>            dp[index][free] = <span class="hljs-built_in">min</span>(p1, p2);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minTime1</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;Machine&gt; heap;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        heap.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Machine</span>(<span class="hljs-number">0</span>, arr[i]));<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">drinks</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        Machine cur = heap.<span class="hljs-built_in">top</span>();<br>        heap.<span class="hljs-built_in">pop</span>();<br>        cur.timePoint += cur.workTime;<br>        drinks[i] = cur.timePoint;<br>        heap.<span class="hljs-built_in">push</span>(cur);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bestTime</span>(drinks, a, b, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// return bestTimeDp(drinks, a, b);</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;Machine&gt; heap;<br>    heap.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Machine</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));<br>    heap.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Machine</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>));<br>    heap.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Machine</span>(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>));<br>    <span class="hljs-keyword">while</span> (!heap.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout &lt;&lt; heap.<span class="hljs-built_in">top</span>().timePoint &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; heap.<span class="hljs-built_in">top</span>().workTime &lt;&lt; endl;<br>        heap.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">20</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">minTime1</span>(arr, n, a, b) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// test1();</span><br>    <span class="hljs-built_in">test2</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划的四种模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cppNotes</title>
    <link href="/2023/08/13/cppNotes/"/>
    <url>/2023/08/13/cppNotes/</url>
    
    <content type="html"><![CDATA[<h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><p>在C++中，初始化列表（initializer list）是用于初始化类成员变量的一种方式。以下是必须在初始化列表中初始化的情况：</p><ul><li><p>常量成员变量（const）：由于常量成员变量在创建对象时必须进行初始化，因此它们必须在初始化列表中初始化。</p></li><li><p>引用成员变量（reference）：引用必须在创建对象时初始化，并且一旦初始化后，就不能再引用其他对象。因此，引用成员变量必须在初始化列表中初始化。</p></li><li><p>成员变量对象（member object）：如果类包含其他类的对象作为成员变量，而这些成员对象没有默认构造函数或者需要传递参数进行初始化，那么它们必须在初始化列表中初始化。</p></li></ul><p>以下是不能在初始化列表中初始化的情况：</p><ul><li><p>静态成员变量（static）：静态成员变量在类定义外进行初始化，而不是在构造函数或初始化列表中。</p></li><li><p>父类的成员变量不能在子类的初始化列表中直接进行初始化，可以在父类的初始化列表中初始化</p></li></ul><h2 id="GCC编译器的结构体对齐指令"><a href="#GCC编译器的结构体对齐指令" class="headerlink" title="GCC编译器的结构体对齐指令"></a>GCC编译器的结构体对齐指令</h2><p>gcc推荐的结构体对齐指令</p><pre><code class="hljs">   __attribute__((packed))   __attribute__((aligned(n)))</code></pre><p>(1) <code>__attribute__((packed))</code>使用时直接放在要进行内存对齐的类型定义的后面，然后它起作用的范围只有加了这个东西的这一个类型。packed的作用就是取消对齐访问。</p><p>注意：定义变量时，加 <code>__attribute__((packed))</code> 是不起作用的，说明<code>__attribute__((packed))</code>只能加在结构体类型后面，只能影响这个结构体类型的整体自己。</p><p>(2) <code>__attribute__((aligned(n)))</code>使用时直接放在要进行内存对齐的类型定义的后面，然后它起作用的范围只有加了这个东西的这一个类型。它的作用是让整个结构体变量整体进行n字节对齐。</p><p>（注意<code>__attribute__((aligned(n)))</code>的作用是结构体变量整体n字节对齐，而不是结构体内各元素也要n字节对齐），这句话什么意思呢？简单理解：当32位编译器，默认对齐时4字节对齐，但是你会发现一个奇怪现象，当 <code>__attribute__((aligned(n)))</code>中的n&#x3D;1、2、4时，他的打印结果都是12（这是4字节对齐的结果：12&#x3D;4+2+2+4），因此可以看出，这里并不是要求结构体内部各元素都要按照n字节对齐，而是要求结构体整体对齐。只有当n的数值大于或等于4时（要求是2的幂次方）才会起作用。</p><h2 id="getline"><a href="#getline" class="headerlink" title="getline"></a>getline</h2><p>ACM 输入输出模式必学的技巧：getline 和 stringstream</p><p>getline 函数原型</p><p>template&lt; class CharT, class Traits, class Allocator &gt;<br>std::basic_istream&lt;CharT,Traits&gt;&amp; getline( std::basic_istream&lt;CharT,Traits&gt;&amp;&amp; input,<br>                                           std::basic_string&lt;CharT,Traits,Allocator&gt;&amp; str,<br>                                           CharT delim );</p><p>getline 从输入流读取字符并将它们放进 string ：</p><ol><li><p>表现为无格式输入函数 (UnformattedInputFunction) ，除了不影响 input.gcount() 。构造并检查 sentry 对象后，进行下列操作：</p><pre><code class="hljs">1. 调用 str.erase()2. 从 input 释出字符并后附它们到 str ，直至发生下列条件之一（按顺序检查）：       1. input 上的文件尾条件，该情况下， getline 设置 eofbit 。       2. 下个可用输入字符是 delim ，以 Traits::eq(c, delim) 测试，该情况下从 input 释出分隔字符，但不后附它到 str 。       3. 已经存储 str.max_size() 个字符，该情况下 getline 设置 failbit 并返回。3. 若因任何原因（不是舍弃的分隔符）没有释出字符，则 getline 设置 failbit 并返回。</code></pre></li><li><p>同 getline(input, str, input.widen(‘\n’)) ，即默认分隔符是换行符。</p></li></ol><ul><li>参数</li></ul><p><code>input</code>-获取数据来源的流<br><code>str</code>-放置数据的目标 string<br><code>delim</code>-分隔字符</p><ul><li>返回值</li></ul><p><code>input</code></p><ul><li>注解</li></ul><p>消耗空白符分隔的输入（例如 int n; std::cin &gt;&gt; n; ）时，任何后随的空白符，包括换行符都会被留在流中。然后当切换到面向行的输入时，以 getline 取得的首行只会是该空白符。多数情况下这是不想要的行为，可能的解法包括：</p><p>对 getline 的显式的额外初始调用<br>以 std::cin &gt;&gt; std::ws 移除额外的空白符<br>以 std::cin.ignore(std::numeric_limits<a href="std::streamsize">std::streamsize</a>::max(), ‘\n’); 忽略输入行上剩下的全部字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    stringstream ss;<br>    string ip = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    ss &lt;&lt; ip;<br>    cout &lt;&lt; ss.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br>    string mac;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ss, mac, <span class="hljs-string">&#x27;.&#x27;</span>))<br>    &#123;<br>        cout &lt;&lt; mac &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string input;<br>    <span class="hljs-comment">// 在 windows 端输入 127.0.0.1 然后输入 ctrl+z ，再输入 enter</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, input, <span class="hljs-string">&#x27; &#x27;</span>))<br>    &#123;<br>        cout &lt;&lt; input &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 输出结果为 127 0 0 1 ；当标准输入接收为 eof 的时候就会返回 null</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// test1();</span><br>    <span class="hljs-built_in">test2</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><h2 id="捕获列表"><a href="#捕获列表" class="headerlink" title="捕获列表"></a>捕获列表</h2><p>上面介绍完了lambda表达式的各个成分，其实很多部分和正常的函数没什么区别，其中最大的一个不同点就是捕获列表。我在刚开始用lambda表达式的时候，还一直以为这个没啥用，只是用一个 [] 来标志着这是一个lambda表达式。后来了解了才知道，原来这个捕获列表如此强大，甚至我觉得捕获列表就是lambda表达式的灵魂。下面先介绍几种常用的捕获方式。</p><p>[] 什么也不捕获，无法lambda函数体使用任何</p><p>[&#x3D;] 按值的方式捕获所有变量</p><p>[&amp;] 按引用的方式捕获所有变量</p><p>[&#x3D;, &amp;a] 除了变量a之外，按值的方式捕获所有局部变量，变量a使用引用的方式来捕获。这里可以按引用捕获多个，例如 [&#x3D;, &amp;a, &amp;b,&amp;c]。这里注意，如果前面加了&#x3D;，后面加的具体的参数必须以引用的方式来捕获，否则会报错。</p><p>[&amp;, a] 除了变量a之外，按引用的方式捕获所有局部变量，变量a使用值的方式来捕获。这里后面的参数也可以多个，例如 [&amp;, a, b, c]。这里注意，如果前面加了&amp;，后面加的具体的参数必须以值的方式来捕获。</p><p>[a, &amp;b] 以值的方式捕获a，引用的方式捕获b，也可以捕获多个。</p><p>[this] 在成员函数中，也可以直接捕获this指针，其实在成员函数中，[&#x3D;]和[&amp;]也会捕获this指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">5</span>;<br>    <br>    <span class="hljs-comment">// 按值来捕获</span><br>    <span class="hljs-keyword">auto</span> func1 = [a] &#123; std::cout &lt;&lt; a &lt;&lt; std::endl; &#125;;<br>    <span class="hljs-built_in">func1</span>();<br><br>    <span class="hljs-comment">// 按值来捕获</span><br>    <span class="hljs-keyword">auto</span> func2 = [=] &#123; std::cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl; &#125;;<br>    <span class="hljs-built_in">func2</span>();<br><br>    <span class="hljs-comment">// 按引用来捕获</span><br>    <span class="hljs-keyword">auto</span> func3 = [&amp;a] &#123; std::cout &lt;&lt; a &lt;&lt; std::endl; &#125;;<br>    <span class="hljs-built_in">func3</span>();<br><br>    <span class="hljs-comment">// 按引用来捕获</span><br>    <span class="hljs-keyword">auto</span> func4 = [&amp;] &#123; std::cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl; &#125;;<br>    <span class="hljs-built_in">func4</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译器如何看待Lambda表达式"><a href="#编译器如何看待Lambda表达式" class="headerlink" title="编译器如何看待Lambda表达式"></a>编译器如何看待Lambda表达式</h2><p>我们把lambda表达式看成一个函数，那编译器怎么看待我们协的lambda呢？</p><p>其实，编译器会把我们写的lambda表达式翻译成一个类，并重载 operator()来实现。比如我们写一个lambda表达式为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> plus = [] (<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) -&gt; <span class="hljs-type">int</span> &#123; <span class="hljs-keyword">return</span> a + b; &#125;<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">plus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>那么编译器会把我们写的表达式翻译为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 类名是我随便起的</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaClass</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span> <span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;;<br><br>LambdaClass plus;<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">plus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>调用的时候编译器会生成一个Lambda的对象，并调用opeartor ()函数。（备注：这里的编译的翻译结果并不和真正的结果完全一致，只是把最主要的部分体现出来，其他的像类到函数指针的转换函数均省略）</p><p>上面是一种调用方式，那么如果我们写一个复杂一点的lambda表达式，表达式中的成分会如何与类的成分对应呢？我们再看一个 值捕获 例子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>; <span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">auto</span> plus = [=] (<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) -&gt; <span class="hljs-type">int</span> &#123; <span class="hljs-keyword">return</span> x + y + a + b; &#125;;<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">plus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>编译器的翻译结果为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaClass</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LambdaClass</span>(<span class="hljs-type">int</span> xx, <span class="hljs-type">int</span> yy)<br>    : <span class="hljs-built_in">x</span>(xx), <span class="hljs-built_in">y</span>(yy) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span> <span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> x + y + a + b;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;<br><br><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>; <span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br><span class="hljs-function">LambdaClass <span class="hljs-title">plus</span><span class="hljs-params">(x, y)</span></span>;<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">plus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>其实这里就可以看出，值捕获时，编译器会把捕获到的值作为类的成员变量，并且变量是以值的方式传递的。需要注意的时，如果所有的参数都是值捕获的方式，那么生成的operator()函数是const函数的，是无法修改捕获的值的，哪怕这个修改不会改变lambda表达式外部的变量，如果想要在函数内修改捕获的值，需要加上关键字 mutable。向下面这样的形式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>; <span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">auto</span> plus = [=] (<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) <span class="hljs-keyword">mutable</span> -&gt; <span class="hljs-type">int</span> &#123; x++; <span class="hljs-keyword">return</span> x + y + a + b; &#125;;<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">plus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h2 id="引用的方式捕获变量"><a href="#引用的方式捕获变量" class="headerlink" title="引用的方式捕获变量"></a>引用的方式捕获变量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">1</span>; <span class="hljs-type">int</span> y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">auto</span> plus = [&amp;] (<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) -&gt; <span class="hljs-type">int</span> &#123; x++; <span class="hljs-keyword">return</span> x + y + a + b;&#125;;<br><span class="hljs-type">int</span> c = <span class="hljs-built_in">plus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>编译器的翻译结果为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaClass</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LambdaClass</span>(<span class="hljs-type">int</span>&amp; xx, <span class="hljs-type">int</span>&amp; yy)<br>    : <span class="hljs-built_in">x</span>(xx), <span class="hljs-built_in">y</span>(yy) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span> <span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x++;<br>        <span class="hljs-keyword">return</span> x + y + a + b;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> &amp;x;<br>    <span class="hljs-type">int</span> &amp;y;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们可以看到以引用的方式捕获变量，和值捕获的方式有3个不同的地方：</p><pre><code class="hljs">1. 参数引用的方式进行传递; 2. 引用捕获在函数体修改变量，会直接修改lambda表达式外部的变量；3. opeartor()函数不是const的。</code></pre><p>针对上面的集中情况，我们把lambda的各个成分和类的各个成分对应起来就是如下的关系:</p><p>捕获列表，对应LambdaClass类的private成员。</p><p>参数列表，对应LambdaClass类的成员函数的operator()的形参列表</p><p>mutable，对应 LambdaClass类成员函数 operator() 的const属性 ，但是只有在捕获列表捕获的参数不含有引用捕获的情况下才会生效，因为捕获列表只要包含引用捕获，那operator()函数就一定是非const函数。</p><p>返回类型，对应 LambdaClass类成员函数 operator() 的返回类型</p><p>函数体，对应 LambdaClass类成员函数 operator() 的函数体。</p><p>引用捕获和值捕获不同的一点就是，对应的成员是否为引用类型。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://en.cppreference.com/w/cpp/language/lambda">参考 cppreference</a></p>]]></content>
    
    
    <categories>
      
      <category>八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式面试八股文</title>
    <link href="/2023/08/13/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <url>/2023/08/13/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux中异常和软中断的区别"><a href="#Linux中异常和软中断的区别" class="headerlink" title="Linux中异常和软中断的区别"></a>Linux中异常和软中断的区别</h2><p>在Linux中，异常（Exception）和软中断（Soft Interrupt）是两种不同类型的中断机制。它们具有以下区别：</p><ul><li>引发条件：</li></ul><p>异常：异常是由CPU在执行指令过程中遇到错误或异常情况时触发的。例如，访问非法内存地址、除零错误等。<br>软中断：软中断是由软件编程请求触发的中断。程序员可以通过系统调用或软中断指令（如INT指令）在用户空间向内核发起软中断。</p><ul><li>处理方式：</li></ul><p>异常：当出现异常时，CPU会立即停止当前正在执行的指令，并转移到异常处理程序来处理异常情况。异常处理程序通常由操作系统内核提供。<br>软中断：软中断通常是由用户空间的应用程序触发的，并且在内核空间中执行相应的软中断处理程序。软中断允许应用程序请求特定的内核功能或服务。</p><ul><li>使用场景：</li></ul><p>异常：异常通常用于处理严重的错误或异常情况，如硬件错误、内存保护违规等。它们是由操作系统内核处理的一种低级事件。<br>软中断：软中断常用于应用程序和内核之间的通信，以及请求特定的内核服务。例如，文件系统操作、网络操作等都可以通过软中断来实现。<br>总之，异常和软中断是两种不同的中断机制，在引发条件、处理方式和使用场景等方面存在明显的区别。异常通常由硬件触发，处理系统底层错误；而软中断是由用户空间程序请求，并用于与内核进行交互和执行特定的内核功能。</p>]]></content>
    
    
    <categories>
      
      <category>八股文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建第一个x86的hello world</title>
    <link href="/2023/07/28/%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAx86%E7%9A%84hello-world/"/>
    <url>/2023/07/28/%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAx86%E7%9A%84hello-world/</url>
    
    <content type="html"><![CDATA[<p>bochs生成bochsrc配置文件，并将执行选项修改为”gui_debug”</p><p>bxiamge 创建一个硬盘，并设置大小为 16M</p><p>将最终产生的脚本添加到bochsrc的配置文件当中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">configuration file generated by Bochs</span><br>plugin_ctrl: unmapped=true, biosdev=true, speaker=true, extfpuirq=true, parallel=true, serial=true, iodebug=true<br>config_interface: textconfig<br><span class="hljs-meta prompt_"># </span><span class="language-bash">modfiy</span><br>display_library: x, options=&quot;gui_debug&quot;<br>memory: host=32, guest=32<br>romimage: file=&quot;/usr/local/share/bochs/BIOS-bochs-latest&quot;, address=0x00000000, options=none<br>vgaromimage: file=&quot;/usr/local/share/bochs/VGABIOS-lgpl-latest&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">modify</span><br>boot: disk<br>floppy_bootsig_check: disabled=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">no floppya</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">no floppyb</span><br>ata0: enabled=true, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14<br><span class="hljs-meta prompt_"># </span><span class="language-bash">modify</span><br>ata0-master: type=disk, path=&quot;master.img&quot;, mode=flat<br>ata0-slave: type=none<br>ata1: enabled=true, ioaddr1=0x170, ioaddr2=0x370, irq=15<br>ata1-master: type=none<br>ata1-slave: type=none<br>ata2: enabled=false<br>ata3: enabled=false<br>optromimage1: file=none<br>optromimage2: file=none<br>optromimage3: file=none<br>optromimage4: file=none<br>optramimage1: file=none<br>optramimage2: file=none<br>optramimage3: file=none<br>optramimage4: file=none<br>pci: enabled=1, chipset=i440fx<br>vga: extension=vbe, update_freq=5, realtime=1<br>cpu: count=1, ips=4000000, model=bx_generic, reset_on_triple_fault=1, cpuid_limit_winnt=0, ignore_bad_msrs=1, mwait_is_nop=0<br>cpuid: level=6, stepping=3, model=3, family=6, vendor_string=&quot;GenuineIntel&quot;, brand_string=&quot;              Intel(R) Pentium(R) 4 CPU        &quot;<br>cpuid: mmx=true, apic=xapic, simd=sse2, sse4a=false, misaligned_sse=false, sep=true<br>cpuid: movbe=false, adx=false, aes=false, sha=false, xsave=false, xsaveopt=false, smep=false<br>cpuid: smap=false, mwait=true<br>print_timestamps: enabled=0<br>debugger_log: -<br>magic_break: enabled=0<br>port_e9_hack: enabled=0<br>private_colormap: enabled=0<br>clock: sync=none, time0=local, rtc_sync=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">no cmosimage</span><br>log: -<br>logprefix: %t%e%d<br>debug: action=ignore<br>info: action=report<br>error: action=report<br>panic: action=ask<br>keyboard: type=mf, serial_delay=250, paste_delay=100000, user_shortcut=none<br>mouse: type=ps2, enabled=false, toggle=ctrl+mbutton<br>speaker: enabled=true, mode=system<br>parport1: enabled=true, file=none<br>parport2: enabled=false<br>com1: enabled=true, mode=null<br>com2: enabled=false<br>com3: enabled=false<br>com4: enabled=false<br></code></pre></td></tr></table></figure><p>利用 <code>bximage</code> 创建扁平格式硬盘映像文件</p><p>上述命令用于创建一个16MB大小、扇区大小为512字节的扁平格式硬盘映像文件 master.img。</p><p><code>yes | bximage -q -hd=16 -mode=create -sectsize=512 -imgmode=flat master.img</code> 这个命令的含义如下：</p><ul><li><code>yes</code> 是一个命令，用于重复输出 “y”（表示同意）。</li><li><code>|</code> 是管道操作符，用于将一个命令的输出作为另一个命令的输入。</li><li><code>bximage</code> 是一个用于创建硬盘映像文件的工具。</li><li><code>-q</code> 参数表示“安静模式”，在不需要进一步确认的情况下运行命令。</li><li><code>-hd=16</code> 参数指定硬盘映像文件的大小为16MB。</li><li><code>-mode=create</code> 参数表示创建一个新的硬盘映像文件。</li><li><code>-sectsize=512</code> 参数指定扇区大小为512字节。</li><li><code>-imgmode=flat</code> 参数表示使用扁平格式作为映像文件的类型。</li><li><code>master.img</code> 是要创建的硬盘映像文件的文件名。</li></ul><p>利用dd命令将hello.asm加入硬盘当中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs asm">[bits 32]<br><br>; extern printf<br>; extern exit<br><br>; section .text<br>; global main<br>; main:<br>;     push message<br>;     call printf<br>;     add esp, 4<br><br>;     push 0<br>;     call exit<br><br>; section .data<br>;     message db &quot;hello world!!!&quot;, 10, 13, 0<br>;     message_end:<br><br>section .text<br>global main<br>main:<br><br>    mov eax, 4; write<br>    mov ebx, 1; stdout<br>    mov ecx, message; buffer<br>    mov edx, message_end - message<br>    int 0x80<br><br>    mov eax, 1; exit<br>    mov ebx, 0; status<br>    int 0x80<br><br>section .data<br>    message db &quot;hello world!!!&quot;, 10, 13, 0<br>    message_end:<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dd if=hello.bin of=master.img bs=512 count=1 conv=notrunc<br></code></pre></td></tr></table></figure><p>这个命令使用<code>dd</code>工具将<code>hello.bin</code>文件的内容复制到<code>master.img</code>文件中，每次复制512字节，只复制一次，并且不截断目标文件。</p><p>下面是对该命令中使用的参数的解释：</p><ul><li><code>if=hello.bin</code>：指定输入文件的路径和名称为<code>hello.bin</code>。</li><li><code>of=master.img</code>：指定输出文件的路径和名称为<code>master.img</code>。</li><li><code>bs=512</code>：指定每个读取和写入操作的块大小为512字节。</li><li><code>count=1</code>：指定只进行一次复制操作。</li><li><code>conv=notrunc</code>：表示不截断目标文件，在写入之前保留目标文件的现有内容。</li></ul><p>请确保在运行该命令之前，<code>hello.bin</code>和<code>master.img</code>文件都存在，并且目标文件<code>master.img</code>的大小足够容纳源文件<code>hello.bin</code>的内容，否则可能会导致数据丢失或截断。</p><p>最终构建项目的 makefile</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">%.bin: %.asm</span><br><span class="hljs-comment"># $&lt; 是输入文件; $@ 是输出文件</span><br>nasm <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-section">master.img: boot.bin</span><br>dd if=boot.bin of=master.img bs=512 count=1 conv=notrunc<br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:bochs</span><br><span class="hljs-comment"># 因为bochs的执行是需要master.img文件的，所以将它添加到依赖上</span><br><span class="hljs-section">bochs:master.img</span><br>bochs -q<br><br><span class="hljs-comment"># 伪目标，每次都会执行，而对于其他目标make之后有可能是 up to date</span><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:clean</span><br><span class="hljs-section">clean:</span><br>rm -rf *.bin<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>x86</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bochs的基本使用教程</title>
    <link href="/2023/07/28/bochs%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2023/07/28/bochs%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Bochs是一款x86模拟器，可以用于模拟运行x86架构的操作系统和软件。下面是Bochs的一些基本使用方式：</p><ol><li><p>启动Bochs：可以在终端中运行以下命令来启动Bochs：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bochs</span><br></code></pre></td></tr></table></figure><p>这将使用默认的bochsrc配置文件启动Bochs模拟器。</p></li><li><p>使用自定义配置文件：如果您有一个自定义的bochsrc配置文件，可以通过以下命令来指定它：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bochs -f <span class="hljs-regexp">/path/</span>to/bochsrc<br></code></pre></td></tr></table></figure><p>将<code>/path/to/bochsrc</code>替换为您的自定义配置文件的路径。</p></li><li><p>使用命令行选项：您可以在启动Bochs时使用一些命令行选项来更改配置。例如，可以使用<code>-q</code>选项以静默模式启动Bochs，或者使用<code>-rc</code>选项指定一个附加的rc脚本文件。</p></li><li><p>调试模式：Bochs还提供了调试功能，可以用于在模拟器中进行调试操作系统或程序。您可以使用以下命令启动Bochs的调试模式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bochs -q -rc <span class="hljs-regexp">/path/</span>to/debugger.bxrc<br></code></pre></td></tr></table></figure><p>这里<code>/path/to/debugger.bxrc</code>是包含调试器相关设置的bxrc脚本文件。在调试模式下，您可以使用一系列的调试命令，例如设置断点、单步执行、查看寄存器值等。</p></li><li><p>退出Bochs：要退出Bochs模拟器，可以在控制台中运行<code>quit</code>或<code>exit</code>命令，或者使用快捷键<code>Ctrl + Alt + Del</code>。</p></li><li><p>bochs生成配置文件并修改为gui_debug</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs shell">whc@whc-virtual-machine:~/code/gitRep/os/computer/x86_assembly/tests$ bochs<br>========================================================================<br>                       Bochs x86 Emulator 2.6.11<br>              Built from SVN snapshot on January 5, 2020<br>                Timestamp: Sun Jan  5 08:36:00 CET 2020<br>========================================================================<br>00000000000i[      ] BXSHARE not set. using compile time default &#x27;/usr/local/share/bochs&#x27;<br>------------------------------<br>Bochs Configuration: Main Menu<br>------------------------------<br><br>This is the Bochs Configuration Interface, where you can describe the<br>machine that you want to simulate.  Bochs has already searched for a<br>configuration file (typically called bochsrc.txt) and loaded it if it<br>could be found.  When you are satisfied with the configuration, go<br>ahead and start the simulation.<br><br>You can also start bochs with the -q option to skip these menus.<br><br>1. Restore factory default configuration<br>2. Read options from...<br>3. Edit options<br>4. Save options to...<br>5. Restore the Bochs state from...<br>6. Begin simulation<br>7. Quit now<br><br>Please choose one: [2] 4<br>Save configuration to what file?  To cancel, type &#x27;none&#x27;.<br>[none] bochsrc<br>00000000000i[      ] write current configuration to bochsrc<br>Wrote configuration to &#x27;bochsrc&#x27;.<br>------------------------------<br>Bochs Configuration: Main Menu<br>------------------------------<br><br>This is the Bochs Configuration Interface, where you can describe the<br>machine that you want to simulate.  Bochs has already searched for a<br>configuration file (typically called bochsrc.txt) and loaded it if it<br>could be found.  When you are satisfied with the configuration, go<br>ahead and start the simulation.<br><br>You can also start bochs with the -q option to skip these menus.<br><br>1. Restore factory default configuration<br>2. Read options from...<br>3. Edit options<br>4. Save options to...<br>5. Restore the Bochs state from...<br>6. Begin simulation<br>7. Quit now<br><br>Please choose one: [2] 7<br>00000000000i[SIM   ] quit_sim called with exit code 1<br></code></pre></td></tr></table></figure><p>bochsrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">configuration file generated by Bochs</span><br>plugin_ctrl: unmapped=true, biosdev=true, speaker=true, extfpuirq=true, parallel=true, serial=true, iodebug=true<br>config_interface: textconfig<br>display_library: x, options=&quot;gui_debug&quot;<br>memory: host=32, guest=32<br>romimage: file=&quot;/usr/local/share/bochs/BIOS-bochs-latest&quot;, address=0x00000000, options=none<br>vgaromimage: file=&quot;/usr/local/share/bochs/VGABIOS-lgpl-latest&quot;<br>boot: floppy<br>floppy_bootsig_check: disabled=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">no floppya</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">no floppyb</span><br>ata0: enabled=true, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14<br>ata0-master: type=none<br>ata0-slave: type=none<br>ata1: enabled=true, ioaddr1=0x170, ioaddr2=0x370, irq=15<br>ata1-master: type=none<br>ata1-slave: type=none<br>ata2: enabled=false<br>ata3: enabled=false<br>optromimage1: file=none<br>optromimage2: file=none<br>optromimage3: file=none<br>optromimage4: file=none<br>optramimage1: file=none<br>optramimage2: file=none<br>optramimage3: file=none<br>optramimage4: file=none<br>pci: enabled=1, chipset=i440fx<br>vga: extension=vbe, update_freq=5, realtime=1<br>cpu: count=1, ips=4000000, model=bx_generic, reset_on_triple_fault=1, cpuid_limit_winnt=0, ignore_bad_msrs=1, mwait_is_nop=0<br>cpuid: level=6, stepping=3, model=3, family=6, vendor_string=&quot;GenuineIntel&quot;, brand_string=&quot;              Intel(R) Pentium(R) 4 CPU        &quot;<br>cpuid: mmx=true, apic=xapic, simd=sse2, sse4a=false, misaligned_sse=false, sep=true<br>cpuid: movbe=false, adx=false, aes=false, sha=false, xsave=false, xsaveopt=false, smep=false<br>cpuid: smap=false, mwait=true<br>print_timestamps: enabled=0<br>debugger_log: -<br>magic_break: enabled=0<br>port_e9_hack: enabled=0<br>private_colormap: enabled=0<br>clock: sync=none, time0=local, rtc_sync=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">no cmosimage</span><br>log: -<br>logprefix: %t%e%d<br>debug: action=ignore<br>info: action=report<br>error: action=report<br>panic: action=ask<br>keyboard: type=mf, serial_delay=250, paste_delay=100000, user_shortcut=none<br>mouse: type=ps2, enabled=false, toggle=ctrl+mbutton<br>speaker: enabled=true, mode=system<br>parport1: enabled=true, file=none<br>parport2: enabled=false<br>com1: enabled=true, mode=null<br>com2: enabled=false<br>com3: enabled=false<br>com4: enabled=false<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bochs2.6.11</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bochs2.6.11 install</title>
    <link href="/2023/07/28/bochs2-6-11-install/"/>
    <url>/2023/07/28/bochs2-6-11-install/</url>
    
    <content type="html"><![CDATA[<h2 id="源码安装bochs2-6-11"><a href="#源码安装bochs2-6-11" class="headerlink" title="源码安装bochs2.6.11"></a>源码安装bochs2.6.11</h2><p>要在 <code>Ubuntu18.06</code> 上进行 <code>Bochs 2.6.11</code> 的源码安装，您可以按照以下步骤进行操作：</p><ol><li><p>下载Bochs源代码：首先，您需要下载Bochs 2.6.11的源代码包。您可以在Bochs的官方网站（<a href="http://bochs.sourceforge.net/%EF%BC%89%E6%88%96GitHub%E5%AD%98%E5%82%A8%E5%BA%93%EF%BC%88https://github.com/bochs/bochs%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E6%BA%90%E4%BB%A3%E7%A0%81%E5%8C%85%E3%80%82%E5%B0%86%E6%BA%90%E4%BB%A3%E7%A0%81%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%82%A8%E7%9A%84Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%AD%E3%80%82">http://bochs.sourceforge.net/）或GitHub存储库（https://github.com/bochs/bochs）上找到源代码包。将源代码包下载到您的Ubuntu系统中。</a></p></li><li><p>安装必要的依赖项：在编译和安装Bochs之前，您需要安装一些必要的依赖项。打开终端并执行以下命令安装所需的软件包：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-built_in">get</span> install build-essential libx11-<span class="hljs-built_in">dev</span> xorg-<span class="hljs-built_in">dev</span> libgtk2<span class="hljs-number">.0</span>-<span class="hljs-built_in">dev</span> libjpeg-<span class="hljs-built_in">dev</span> libpng-<span class="hljs-built_in">dev</span> libasound2-<span class="hljs-built_in">dev</span> libssl-<span class="hljs-built_in">dev</span> libsdl1<span class="hljs-number">.2</span>-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure></li><li><p>解压源代码包：将下载的Bochs源代码包解压到一个合适的目录中。</p></li><li><p>进入源代码目录：在终端中，使用<code>cd</code>命令进入解压后的Bochs源代码目录。</p></li></ol><p>由于<code>bochs</code>的仓库年久失修，所以建议按照这个建议修改两个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">Description: Fix the build with SMP enabled<br>Origin: https://sourceforge.net/p/bochs/code/13778/<br><br>Index: bochs/bx_debug/dbg_main.cc<br>===================================================================<br>--- bochs/bx_debug/dbg_main.cc(revision 13777)<br>+++ bochs/bx_debug/dbg_main.cc(working copy)<br>@@ -1494,11 +1494,11 @@<br> &#123;<br>   char cpu_param_name[16];<br> <br>-  Bit32u index = BX_ITLB_INDEX_OF(laddr);<br>+  Bit32u index = BX_CPU(dbg_cpu)-&gt;ITLB.get_index_of(laddr);<br>   sprintf(cpu_param_name, &quot;ITLB.entry%d&quot;, index);<br>   bx_dbg_show_param_command(cpu_param_name, 0);<br> <br>-  index = BX_DTLB_INDEX_OF(laddr, 0);<br>+  index = BX_CPU(dbg_cpu)-&gt;DTLB.get_index_of(laddr);<br>   sprintf(cpu_param_name, &quot;DTLB.entry%d&quot;, index);<br>   bx_dbg_show_param_command(cpu_param_name, 0);<br> &#125;<br><br>Index: bochs/gui/gtk_enh_dbg_osdep.cc<br>===================================================================<br>--- bochs/gui/gtk_enh_dbg_osdep.cc<br>+++ bochs/gui/gtk_enh_dbg_osdep.cc<br>@@ -819,7 +819,7 @@ void ShowDListCols (int totcols)<br>     while (++i &lt; firsthide)<br>         gtk_tree_view_column_set_visible(AllCols[i], TRUE);<br>     while (i &lt; 23)<br>-        gtk_tree_view_column_set_visible(AllCols[i], FALSE);<br>+        gtk_tree_view_column_set_visible(AllCols[i++], FALSE);<br> &#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>配置和编译：</li></ol><p>修改完之后如果需要gdb远程调试功能需要将解压出来的源码包一式两份，拷贝为两个文件夹的名字分别是<code>bochs-2.6.11</code>（配置自带调试功能）和<code>bochsgdb-2.6.11</code>（配置gdb远程调试功能）。</p><p>如果之前安装过<code>bochs</code>需要卸载，<code>apt remove</code> 卸载<code>apt</code>安装的包，源码卸载方式是进入源码安装文件夹<code>sudo make uninstall</code></p><p>安装 bochs<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">--prefix=/usr/local/ 这里修改为你自己想要指定的安装路径</span><br>./configure --prefix=/usr/local/ --with-x11 --with-wx --enable-debugger --enable-disasm --enable-all-optimizations --enable-readline --enable-long-phy-address --enable-ltdl-install --enable-idle-hack --enable-plugins --enable-a20-pin --enable-x86-64 --enable-smp --enable-cpu-level=6 --enable-large-ramfile --enable-repeat-speedups --enable-fast-function-calls  --enable-handlers-chaining  --enable-trace-linking --enable-configurable-msrs --enable-show-ips  --enable-debugger-gui --enable-iodebug --enable-logging --enable-assert-checks --enable-fpu --enable-vmx=2 --enable-svm --enable-3dnow --enable-alignment-check  --enable-monitor-mwait --enable-avx  --enable-evex --enable-x86-debugger --enable-pci --enable-usb --enable-voodoo<br><br>make<br>sudo make install<br></code></pre></td></tr></table></figure></p><p>安装 bochs-gdb</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">--prefix=/home/whc/code/optFile/bochsgdb 这里修改为你自己想要指定的安装路径</span><br>./configure --prefix=/home/whc/code/optFile/bochsgdb --with-x11 --with-wx --enable-disasm --enable-all-optimizations --enable-readline --enable-long-phy-address --enable-ltdl-install --enable-idle-hack --enable-plugins --enable-a20-pin --enable-x86-64 --enable-cpu-level=6 --enable-large-ramfile --enable-repeat-speedups --enable-fast-function-calls  --enable-handlers-chaining  --enable-trace-linking --enable-configurable-msrs --enable-show-ips  --enable-debugger-gui --enable-iodebug --enable-logging --enable-assert-checks --enable-fpu --enable-vmx=2 --enable-svm --enable-3dnow --enable-alignment-check  --enable-monitor-mwait --enable-avx  --enable-evex --enable-x86-debugger --enable-pci --enable-usb --enable-voodoo -enable-gdb-stub<br><br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>然后我们还要做一件事：对这个新的<code>bochs</code>重命名，让它和之前的<code>bochs</code>区分。</p><p>我们只需要进入安装<code>bochs-gdb</code>的目录，然后执行以下命令</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd bin<br>sudo mv bochs bochs-gdb<br>sudo mv bximage bximage-gdb<br></code></pre></td></tr></table></figure><p>然后修改 <code>~/.bashrc</code> 或者 <code>~/.zshrc</code> （取决于你用什么shell）<br>加入下面两行</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=/usr/local/bochs/bin:$PATH<br>export PATH=/home/whc/code/optFile/bin:$PATH<br></code></pre></td></tr></table></figure><ol start="6"><li><p>安装完成后，您可以尝试运行Bochs来验证安装是否成功。在新建终端中输入以下命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bochs</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>bochs2.6.11</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>personalBlog</title>
    <link href="/2023/07/18/personalBlog/"/>
    <url>/2023/07/18/personalBlog/</url>
    
    <content type="html"><![CDATA[<h2 id="blog建立和维护"><a href="#blog建立和维护" class="headerlink" title="blog建立和维护"></a>blog建立和维护</h2><h3 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h3><p>强烈建议去搞个速度快的tizi</p><p>参考博文 <a href="https://blog.csdn.net/yaorongke/article/details/119089190" title="参考博文">参考博文</a>。</p><p>参考博文 <a href="https://zhuanlan.zhihu.com/p/60578464" title="参考博文">参考博文</a>。</p><h3 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h3><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>hexo new post “测试文章”</p><h4 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WHC2Enable</title>
    <link href="/2023/07/18/WHC2Enable/"/>
    <url>/2023/07/18/WHC2Enable/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="2023/07/18/WHC2Enable/lxq1.jpg" class="" title="图片引用方法一"><p><img src="lxq1.jpg" alt="图片引用方法二"></p><p><img src="/images/lxq1.jpg" alt="图片引用方法三"></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/18/hello-world/"/>
    <url>/2023/07/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
